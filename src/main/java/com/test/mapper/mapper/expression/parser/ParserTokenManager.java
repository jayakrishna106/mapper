/*
 * Copyright (C) 2017 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.test.mapper.mapper.expression.parser;
;

/** Token Manager. */
@SuppressWarnings ("unused")
public class ParserTokenManager implements ParserConstants {

    /** Debug output. */
    public  java.io.PrintStream debugStream = System.out;
    /** Set debug output. */
    public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
    private int jjStopAtPos(int pos, int kind)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }
    private int jjMoveStringLiteralDfa0_0(){
        switch(curChar)
        {
            case 9:
                jjmatchedKind = 2;
                return jjMoveNfa_0(5, 0);
            case 10:
                jjmatchedKind = 3;
                return jjMoveNfa_0(5, 0);
            case 12:
                jjmatchedKind = 5;
                return jjMoveNfa_0(5, 0);
            case 13:
                jjmatchedKind = 4;
                return jjMoveNfa_0(5, 0);
            case 32:
                jjmatchedKind = 1;
                return jjMoveNfa_0(5, 0);
            case 33:
                jjmatchedKind = 33;
                return jjMoveStringLiteralDfa1_0(0x800000L);
            case 37:
                jjmatchedKind = 32;
                return jjMoveNfa_0(5, 0);
            case 38:
                return jjMoveStringLiteralDfa1_0(0x100L);
            case 40:
                jjmatchedKind = 34;
                return jjMoveNfa_0(5, 0);
            case 41:
                jjmatchedKind = 35;
                return jjMoveNfa_0(5, 0);
            case 42:
                jjmatchedKind = 30;
                return jjMoveNfa_0(5, 0);
            case 43:
                jjmatchedKind = 28;
                return jjMoveNfa_0(5, 0);
            case 44:
                jjmatchedKind = 36;
                return jjMoveNfa_0(5, 0);
            case 45:
                jjmatchedKind = 29;
                return jjMoveNfa_0(5, 0);
            case 47:
                jjmatchedKind = 31;
                return jjMoveNfa_0(5, 0);
            case 48:
                jjmatchedKind = 14;
                return jjMoveNfa_0(5, 0);
            case 60:
                jjmatchedKind = 26;
                return jjMoveStringLiteralDfa1_0(0x8000000L);
            case 61:
                return jjMoveStringLiteralDfa1_0(0x400000L);
            case 62:
                jjmatchedKind = 24;
                return jjMoveStringLiteralDfa1_0(0x2000000L);
            case 70:
                return jjMoveStringLiteralDfa1_0(0x800L);
            case 78:
                return jjMoveStringLiteralDfa1_0(0x1000L);
            case 84:
                return jjMoveStringLiteralDfa1_0(0x400L);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x800L);
            case 110:
                return jjMoveStringLiteralDfa1_0(0x1000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x400L);
            case 124:
                return jjMoveStringLiteralDfa1_0(0x200L);
            default :
                return jjMoveNfa_0(5, 0);
        }
    }
    private int jjMoveStringLiteralDfa1_0(long active0){
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            return jjMoveNfa_0(5, 0);
        }
        switch(curChar)
        {
            case 38:
                if ((active0 & 0x100L) != 0L)
                {
                    jjmatchedKind = 8;
                    jjmatchedPos = 1;
                }
                break;
            case 61:
                if ((active0 & 0x400000L) != 0L)
                {
                    jjmatchedKind = 22;
                    jjmatchedPos = 1;
                }
                else if ((active0 & 0x800000L) != 0L)
                {
                    jjmatchedKind = 23;
                    jjmatchedPos = 1;
                }
                else if ((active0 & 0x2000000L) != 0L)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 1;
                }
                else if ((active0 & 0x8000000L) != 0L)
                {
                    jjmatchedKind = 27;
                    jjmatchedPos = 1;
                }
                break;
            case 65:
                return jjMoveStringLiteralDfa2_0(active0, 0x800L);
            case 82:
                return jjMoveStringLiteralDfa2_0(active0, 0x400L);
            case 85:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x800L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x400L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
            case 124:
                if ((active0 & 0x200L) != 0L)
                {
                    jjmatchedKind = 9;
                    jjmatchedPos = 1;
                }
                break;
            default :
                break;
        }
        return jjMoveNfa_0(5, 1);
    }
    private int jjMoveStringLiteralDfa2_0(long old0, long active0){
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 1);
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            return jjMoveNfa_0(5, 1);
        }
        switch(curChar)
        {
            case 76:
                return jjMoveStringLiteralDfa3_0(active0, 0x1800L);
            case 85:
                return jjMoveStringLiteralDfa3_0(active0, 0x400L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x1800L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x400L);
            default :
                break;
        }
        return jjMoveNfa_0(5, 2);
    }
    private int jjMoveStringLiteralDfa3_0(long old0, long active0){
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 2);
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            return jjMoveNfa_0(5, 2);
        }
        switch(curChar)
        {
            case 69:
                if ((active0 & 0x400L) != 0L)
                {
                    jjmatchedKind = 10;
                    jjmatchedPos = 3;
                }
                break;
            case 76:
                if ((active0 & 0x1000L) != 0L)
                {
                    jjmatchedKind = 12;
                    jjmatchedPos = 3;
                }
                break;
            case 83:
                return jjMoveStringLiteralDfa4_0(active0, 0x800L);
            case 101:
                if ((active0 & 0x400L) != 0L)
                {
                    jjmatchedKind = 10;
                    jjmatchedPos = 3;
                }
                break;
            case 108:
                if ((active0 & 0x1000L) != 0L)
                {
                    jjmatchedKind = 12;
                    jjmatchedPos = 3;
                }
                break;
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0x800L);
            default :
                break;
        }
        return jjMoveNfa_0(5, 3);
    }
    private int jjMoveStringLiteralDfa4_0(long old0, long active0){
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 3);
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            return jjMoveNfa_0(5, 3);
        }
        switch(curChar)
        {
            case 69:
                if ((active0 & 0x800L) != 0L)
                {
                    jjmatchedKind = 11;
                    jjmatchedPos = 4;
                }
                break;
            case 101:
                if ((active0 & 0x800L) != 0L)
                {
                    jjmatchedKind = 11;
                    jjmatchedPos = 4;
                }
                break;
            default :
                break;
        }
        return jjMoveNfa_0(5, 4);
    }
    static final long[] jjbitVec0 = {
        0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec2 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    private int jjMoveNfa_0(int startState, int curPos)
    {
        int strKind = jjmatchedKind;
        int strPos = jjmatchedPos;
        int seenUpto;
        input_stream.backup(seenUpto = curPos + 1);
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) { throw new Error("Internal Error"); }
        curPos = 0;
        int startsAt = 0;
        jjnewStateCnt = 49;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;)
        {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64)
            {
                long l = 1L << curChar;
                do
                {
                    switch(jjstateSet[--i])
                    {
                        case 5:
                            if ((0x3ff000000000000L & l) != 0L)
                            { jjCheckNAddStates(0, 3); }
                            else if (curChar == 36)
                                jjstateSet[jjnewStateCnt++] = 28;
                            else if (curChar == 39)
                            { jjCheckNAddStates(4, 6); }
                            else if (curChar == 46)
                            { jjCheckNAdd(17); }
                            else if (curChar == 47)
                                jjstateSet[jjnewStateCnt++] = 6;
                            else if (curChar == 45)
                                jjstateSet[jjnewStateCnt++] = 0;
                            if ((0x3fe000000000000L & l) != 0L)
                            {
                                if (kind > 13)
                                    kind = 13;
                                { jjCheckNAddTwoStates(14, 15); }
                            }
                            else if (curChar == 48)
                            {
                                if (kind > 16)
                                    kind = 16;
                                { jjCheckNAddTwoStates(46, 48); }
                            }
                            break;
                        case 0:
                            if (curChar == 45)
                            { jjCheckNAddStates(7, 9); }
                            break;
                        case 1:
                            if ((0xffffffffffffdbffL & l) != 0L)
                            { jjCheckNAddStates(7, 9); }
                            break;
                        case 2:
                            if ((0x2400L & l) != 0L && kind > 6)
                                kind = 6;
                            break;
                        case 3:
                            if (curChar == 10 && kind > 6)
                                kind = 6;
                            break;
                        case 4:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 3;
                            break;
                        case 6:
                            if (curChar == 42)
                            { jjCheckNAddTwoStates(7, 8); }
                            break;
                        case 7:
                            if ((0xfffffbffffffffffL & l) != 0L)
                            { jjCheckNAddTwoStates(7, 8); }
                            break;
                        case 8:
                            if (curChar == 42)
                            { jjCheckNAddStates(10, 12); }
                            break;
                        case 9:
                            if ((0xffff7bffffffffffL & l) != 0L)
                            { jjCheckNAddTwoStates(10, 8); }
                            break;
                        case 10:
                            if ((0xfffffbffffffffffL & l) != 0L)
                            { jjCheckNAddTwoStates(10, 8); }
                            break;
                        case 11:
                            if (curChar == 47 && kind > 7)
                                kind = 7;
                            break;
                        case 12:
                            if (curChar == 47)
                                jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 13:
                            if ((0x3fe000000000000L & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                        { jjCheckNAddTwoStates(14, 15); }
                        break;
                        case 14:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                        { jjCheckNAddTwoStates(14, 15); }
                        break;
                        case 16:
                            if (curChar == 46)
                            { jjCheckNAdd(17); }
                            break;
                        case 17:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 17)
                                kind = 17;
                        { jjCheckNAddTwoStates(17, 18); }
                        break;
                        case 19:
                            if ((0x280000000000L & l) != 0L)
                            { jjCheckNAdd(20); }
                            break;
                        case 20:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 17)
                                kind = 17;
                        { jjCheckNAdd(20); }
                        break;
                        case 21:
                        case 22:
                            if (curChar == 39)
                            { jjCheckNAddStates(4, 6); }
                            break;
                        case 23:
                            if (curChar == 39)
                                jjstateSet[jjnewStateCnt++] = 22;
                            break;
                        case 24:
                            if ((0xffffff7fffffffffL & l) != 0L)
                            { jjCheckNAddStates(4, 6); }
                            break;
                        case 25:
                            if (curChar == 39 && kind > 19)
                                kind = 19;
                            break;
                        case 27:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 20)
                                kind = 20;
                            jjstateSet[jjnewStateCnt++] = 27;
                            break;
                        case 31:
                        { jjAddStates(13, 15); }
                        break;
                        case 33:
                            if (curChar == 36)
                                jjstateSet[jjnewStateCnt++] = 28;
                            break;
                        case 34:
                            if ((0x3ff000000000000L & l) != 0L)
                            { jjCheckNAddStates(0, 3); }
                            break;
                        case 35:
                            if ((0x3ff000000000000L & l) != 0L)
                            { jjCheckNAddTwoStates(35, 36); }
                            break;
                        case 36:
                            if (curChar != 46)
                                break;
                            if (kind > 17)
                                kind = 17;
                        { jjCheckNAddTwoStates(37, 38); }
                        break;
                        case 37:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 17)
                                kind = 17;
                        { jjCheckNAddTwoStates(37, 38); }
                        break;
                        case 39:
                            if ((0x280000000000L & l) != 0L)
                            { jjCheckNAdd(40); }
                            break;
                        case 40:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 17)
                                kind = 17;
                        { jjCheckNAdd(40); }
                        break;
                        case 41:
                            if ((0x3ff000000000000L & l) != 0L)
                            { jjCheckNAddTwoStates(41, 42); }
                            break;
                        case 43:
                            if ((0x280000000000L & l) != 0L)
                            { jjCheckNAdd(44); }
                            break;
                        case 44:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 17)
                                kind = 17;
                        { jjCheckNAdd(44); }
                        break;
                        case 45:
                            if (curChar != 48)
                                break;
                            if (kind > 16)
                                kind = 16;
                        { jjCheckNAddTwoStates(46, 48); }
                        break;
                        case 47:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 15)
                                kind = 15;
                            jjstateSet[jjnewStateCnt++] = 47;
                            break;
                        case 48:
                            if ((0xff000000000000L & l) == 0L)
                                break;
                            if (kind > 16)
                                kind = 16;
                        { jjCheckNAdd(48); }
                        break;
                        default : break;
                    }
                } while(i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
                do
                {
                    switch(jjstateSet[--i])
                    {
                        case 5:
                        case 27:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 20)
                                kind = 20;
                        { jjCheckNAdd(27); }
                        break;
                        case 1:
                        { jjAddStates(7, 9); }
                        break;
                        case 7:
                        { jjCheckNAddTwoStates(7, 8); }
                        break;
                        case 9:
                        case 10:
                        { jjCheckNAddTwoStates(10, 8); }
                        break;
                        case 15:
                            if ((0x100000001000L & l) != 0L && kind > 13)
                                kind = 13;
                            break;
                        case 18:
                            if ((0x2000000020L & l) != 0L)
                            { jjAddStates(16, 17); }
                            break;
                        case 24:
                        { jjAddStates(4, 6); }
                        break;
                        case 28:
                            if (curChar == 123)
                            { jjCheckNAddTwoStates(30, 31); }
                            break;
                        case 29:
                            if (curChar == 125)
                            { jjCheckNAddStates(13, 15); }
                            break;
                        case 30:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 29;
                            break;
                        case 31:
                            if ((0xdfffffffffffffffL & l) != 0L)
                            { jjCheckNAddStates(13, 15); }
                            break;
                        case 32:
                            if (curChar == 125 && kind > 21)
                                kind = 21;
                            break;
                        case 38:
                            if ((0x2000000020L & l) != 0L)
                            { jjAddStates(18, 19); }
                            break;
                        case 42:
                            if ((0x2000000020L & l) != 0L)
                            { jjAddStates(20, 21); }
                            break;
                        case 46:
                            if ((0x100000001000000L & l) != 0L)
                            { jjCheckNAdd(47); }
                            break;
                        case 47:
                            if ((0x7e0000007eL & l) == 0L)
                                break;
                            if (kind > 15)
                                kind = 15;
                        { jjCheckNAdd(47); }
                        break;
                        default : break;
                    }
                } while(i != startsAt);
            }
            else
            {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do
                {
                    switch(jjstateSet[--i])
                    {
                        case 1:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                            { jjAddStates(7, 9); }
                            break;
                        case 7:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                            { jjCheckNAddTwoStates(7, 8); }
                            break;
                        case 9:
                        case 10:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                            { jjCheckNAddTwoStates(10, 8); }
                            break;
                        case 24:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                            { jjAddStates(4, 6); }
                            break;
                        case 31:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                            { jjAddStates(13, 15); }
                            break;
                        default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
                    }
                } while(i != startsAt);
            }
            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 49 - (jjnewStateCnt = startsAt)))
                break;
            try { curChar = input_stream.readChar(); }
            catch(java.io.IOException e) { break; }
        }
        if (jjmatchedPos > strPos)
            return curPos;

        int toRet = Math.max(curPos, seenUpto);

        if (curPos < toRet)
            for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
                try { curChar = input_stream.readChar(); }
                catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

        if (jjmatchedPos < strPos)
        {
            jjmatchedKind = strKind;
            jjmatchedPos = strPos;
        }
        else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
            jjmatchedKind = strKind;

        return toRet;
    }

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, "\46\46", "\174\174", null, null,
        null, null, "\60", null, null, null, null, null, null, null, "\75\75", "\41\75",
        "\76", "\76\75", "\74", "\74\75", "\53", "\55", "\52", "\57", "\45", "\41", "\50",
        "\51", "\54", };
    protected Token jjFillToken()
    {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }
    static final int[] jjnextStates = {
        35, 36, 41, 42, 23, 24, 25, 1, 2, 4, 8, 9, 11, 30, 31, 32,
        19, 20, 39, 40, 43, 44,
    };
    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
    {
        switch(hiByte)
        {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default :
                if ((jjbitVec0[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /** Get the next Token. */
    public Token getNextToken()
    {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        for (;;)
        {
            try
            {
                curChar = input_stream.BeginToken();
            }
            catch(Exception e)
            {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }

            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff)
            {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
                {
                    matchedToken = jjFillToken();
                    matchedToken.specialToken = specialToken;
                    return matchedToken;
                }
                else
                {
                    if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
                    {
                        matchedToken = jjFillToken();
                        if (specialToken == null)
                            specialToken = matchedToken;
                        else
                        {
                            matchedToken.specialToken = specialToken;
                            specialToken = (specialToken.next = matchedToken);
                        }
                    }
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try { input_stream.readChar(); input_stream.backup(1); }
            catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                }
                else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    void SkipLexicalActions(Token matchedToken)
    {
        switch(jjmatchedKind)
        {
            default :
                break;
        }
    }
    void MoreLexicalActions()
    {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch(jjmatchedKind)
        {
            default :
                break;
        }
    }
    void TokenLexicalActions(Token matchedToken)
    {
        switch(jjmatchedKind)
        {
            default :
                break;
        }
    }
    private void jjCheckNAdd(int state)
    {
        if (jjrounds[state] != jjround)
        {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }
    private void jjAddStates(int start, int end)
    {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }
    private void jjCheckNAddTwoStates(int state1, int state2)
    {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end)
    {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

        input_stream = stream;
    }

    /** Constructor. */
    public ParserTokenManager (SimpleCharStream stream, int lexState){
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Reinitialise parser. */

    public void ReInit(SimpleCharStream stream)
    {


        jjmatchedPos =
            jjnewStateCnt =
                0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds()
    {
        int i;
        jjround = 0x80000001;
        for (i = 49; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream, int lexState)

    {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    public void SwitchTo(int lexState)
    {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }


    /** Lexer state names. */
    public static final String[] lexStateNames = {
        "DEFAULT",
    };

    /** Lex State array. */
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    };
    static final long[] jjtoToken = {
        0x1ffffbff01L,
    };
    static final long[] jjtoSkip = {
        0xfeL,
    };
    static final long[] jjtoSpecial = {
        0x3eL,
    };
    static final long[] jjtoMore = {
        0x0L,
    };
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[49];
    private final int[] jjstateSet = new int[2 * 49];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
